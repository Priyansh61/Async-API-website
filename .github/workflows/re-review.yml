# This action is centrally managed in https://github.com/asyncapi/.github/
# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo

# This action is used to call the reviewer to review the PR

name: Review

on:
    issue_comment:
        types: [created]

jobs: 
    review:
        if : >
            github.event.issue.pull_request &&
            github.event.issue.state != 'closed' &&
            github.actor != 'asyncapi-bot' && 
            (
                contains(github.event.comment.body, '/review') ||
                contains(github.event.comment.body, '/rerequest ')
            )
        runs-on: ubuntu-latest
        steps:
            - name: Check for Ping for Attention Command
              uses: actions/github-script@v6
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    const comment = context.payload.comment.body;
                    console.log("Comment: ", comment);
                    const prDetailsUrl = context.payload.issue.pull_request.url;
                    const { data } = await github.request(prDetailsUrl);
                    const pullRequestId = data.node_id;
                    const userIDregex = /@([A-Za-z0-9-]+)/g;

                    const userIDmatches = comment.match(userIDregex);
                    console.log("User ID Matches: ", userIDmatches);
                    const userIdArray = Array.from(userIDmatches).map((match) => match.replace('@', ''));
                    const userIdNodeArray = [];
                    for (const user of userIdArray) {
                        const { data } = await github.request(`https://api.github.com/users/${user}`);
                        const userId = data.node_id;
                        userIdNodeArray.push(userId);
                    }
                    console.log("User ID Node Array: ", userIdNodeArray);

                    if (userIdNodeArray.length > 0) {
                        const mutationQuery = `
                        mutation { 
                            requestReviews(input: { 
                                pullRequestId: "${pullRequestId}", 
                                userIds: ${JSON.stringify(userIdNodeArray)} 
                            }) { 
                                pullRequest { 
                                    id 
                                } 
                            }
                        }`;
                    
                        const { data } = await github.graphql(mutationQuery);
                        console.log("Data: ", data);
                    }
                


                    
